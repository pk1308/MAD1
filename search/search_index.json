{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":""},{"location":"#project-layout","title":"Project layout","text":""},{"location":"pdf/embeding/","title":"Embeding","text":""},{"location":"week1/Week%201_annotated/","title":"Week 1_annotated.pdf (PDF file)","text":""},{"location":"week1/Week%201_annotated/#week-1_annotatedpdf-pdf-file","title":"Week 1_annotated.pdf (PDF file)","text":"<p>Summary Apps</p> <ul> <li>Software that runs on mobile devices, typically specific and compact.</li> <li>Originally referred to desktop or mobile applications, but now focuses on small, downloadable programs.</li> </ul> <p>Desktop Apps</p> <ul> <li>Standalone, often offline</li> <li>Use local data storage</li> <li>Specific frameworks for each OS</li> </ul> <p>Mobile Apps</p> <ul> <li>Designed for mobile platforms (phones/tablets)</li> <li>Limited screen space, touch interaction</li> <li>Frameworks vary by OS and platform</li> <li>Network-oriented</li> </ul> <p>Web Apps</p> <ul> <li>Platform-independent</li> <li>Work across devices and OS</li> </ul> <p>Components of Applications</p> <ul> <li>Storage: Where data is stored</li> <li>Computation: Indexing, searching, etc.</li> <li>Presentation: Displaying content</li> </ul> <p>Platforms</p> <ul> <li>Desktop, mobile, web-based, embedded</li> <li>Platform features vary (e.g., keyboard/mouse, touchscreen, etc.)</li> </ul> <p>Architectures</p> <ul> <li>Client-Server: Explicit server and client</li> <li>Distributed (Peer-to-Peer): All peers are considered equal</li> </ul> <p>Client-Server Model</p> <ul> <li>Explicit differentiation between clients and servers</li> <li>May have local clients on same machine</li> <li>Variants include multiple servers, load balancing, etc.</li> </ul> <p>Distributed (Peer-to-Peer) Model</p> <ul> <li>All peers are equal</li> <li>Error tolerance and shared information</li> </ul> <p>Software Architecture Patterns</p> <ul> <li>MVC (Model-View-Controller): Core data, user interface, and business logic</li> <li>MVA, MVP, HMVC, MVVM, etc.</li> </ul> <p>Focus of the Course</p> <ul> <li>Platform: Web-based</li> <li>Architecture: Client-server</li> <li>Software architecture: Model-View-Controller</li> <li>Building apps that use web-based servers and hypertext markup for display</li> </ul> <p>The Web</p> <ul> <li>Platform choice for the course</li> <li>Generic, cross-platform, and worth understanding</li> <li>Constraints and costs to consider</li> </ul> <p>Historical Background of the Web</p> <ul> <li>Telephone networks (circuit switching)</li> <li>Packet switched networks</li> <li>ARPANet, Ethernet, etc.</li> <li>Protocols and inter-network communication</li> <li>IP and TCP</li> <li>Domain names, hypertext, and the World Wide Web</li> </ul> <p>Web 2.0</p> <ul> <li>Dynamic pages, HTTP transport mechanism, client-side computation</li> <li>Platform agnostic operating system</li> </ul> <p>Performance of Web Apps</p> <ul> <li>Latency and response size impact performance</li> <li>Server resources, storage requirements, and client compute resources also affect speed</li> </ul> <p>Web Servers</p> <ul> <li>Any computer with a network connection</li> <li>Listen for incoming requests and respond accordingly</li> <li>Follow specific protocols</li> </ul> <p>HTTP (HyperText Transfer Protocol)</p> <ul> <li>Text-based protocol for client requests and server responses</li> <li>Specifies request types (GET, POST, PUT, etc.)</li> <li>Headers convey request information and server capabilities</li> </ul> <p>Protocol</p> <ul> <li>Defines communication methods between server and client</li> <li>HTTP specifies request types, headers, and response formats</li> </ul> <p>Use Cases of HTTP</p> <ul> <li>GET: Simple requests</li> <li>POST: Complex form data, file uploads</li> <li>PUT/DELETE: Extensively used in Web 2.0 and APIs</li> </ul> <p>Memory and Storage Requirements</p> <ul> <li>Server processes can require significant memory for concurrent requests</li> <li>Search engines like Google may need massive data storage for indexing and cross-referencing web pages Lec file</li> </ul>"},{"location":"week1/Week%201_annotated/#week-1_annotatedpdf-pdf-file_1","title":"Week 1_annotated.pdf (PDF file)","text":""},{"location":"week1/pq_session/","title":"Pq session","text":"<p>Alt text</p> <p></p>"},{"location":"week1/week_activity1/","title":"Week activity1","text":"<p>LectureSummary</p> <p>Week One: Course Overview, Web Architecture, and Network Fundamentals</p> <p>Overview</p> <ul> <li>Introduction to the course and its objectives</li> <li>Overview of the different components of web applications</li> <li>Introduction to web architecture and network fundamentals</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to the course</li> <li>What is web development?</li> <li>The different components of web applications</li> <li>Web architecture</li> <li>Network fundamentals</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 1.1: Identify the different components of a web application</li> <li>Activity 1.2: Explain the basic concepts of web architecture</li> <li>Assignment 1.1: Write a simple HTML document</li> </ul> <p>Resources</p> <ul> <li>HTML Tutorial</li> <li>CSS Tutorial</li> <li>Python Tutorial</li> </ul> <p>Week Two: HTML and CSS</p> <p>Overview</p> <ul> <li>Introduction to HTML and CSS</li> <li>Creating basic web pages using HTML and CSS</li> <li>Styling web pages using CSS</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to HTML</li> <li>HTML elements and attributes</li> <li>Creating basic web pages using HTML</li> <li>Introduction to CSS</li> <li>CSS selectors and properties</li> <li>Styling web pages using CSS</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 2.1: Create a simple HTML document</li> <li>Activity 2.2: Style a web page using CSS</li> <li>Assignment 2.1: Create a web page with a header, footer, and sidebar</li> </ul> <p>Resources</p> <ul> <li>HTML Tutorial</li> <li>CSS Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Three: JavaScript and jQuery</p> <p>Overview</p> <ul> <li>Introduction to JavaScript and jQuery</li> <li>Using JavaScript and jQuery to add interactivity to web pages</li> <li>Creating dynamic web pages using JavaScript and jQuery</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to JavaScript</li> <li>JavaScript syntax and data types</li> <li>JavaScript functions and objects</li> <li>Introduction to jQuery</li> <li>jQuery selectors and events</li> <li>Creating dynamic web pages using JavaScript and jQuery</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 3.1: Write a simple JavaScript program</li> <li>Activity 3.2: Use jQuery to add interactivity to a web page</li> <li>Assignment 3.1: Create a web page that uses JavaScript and jQuery to validate a form</li> </ul> <p>Resources</p> <ul> <li>JavaScript Tutorial</li> <li>jQuery Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Four: Python and Flask</p> <p>Overview</p> <ul> <li>Introduction to Python and Flask</li> <li>Using Python and Flask to create web applications</li> <li>Handling user input and requests</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to Python</li> <li>Python syntax and data types</li> <li>Python functions and objects</li> <li>Introduction to Flask</li> <li>Flask routes and views</li> <li>Handling user input and requests</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 4.1: Write a simple Python program</li> <li>Activity 4.2: Create a simple web application using Flask</li> <li>Assignment 4.1: Create a web application that accepts user input and displays it on the screen</li> </ul> <p>Resources</p> <ul> <li>Python Tutorial</li> <li>Flask Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Five: Databases and SQLAlchemy</p> <p>Overview</p> <ul> <li>Introduction to databases and SQLAlchemy</li> <li>Using SQLAlchemy to interact with databases</li> <li>Creating and managing databases using SQLAlchemy</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to databases</li> <li>Database types and structures</li> <li>Introduction to SQLAlchemy</li> <li>SQLAlchemy models and relationships</li> <li>Creating and managing databases using SQLAlchemy</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 5.1: Create a simple database using SQLAlchemy</li> <li>Activity 5.2: Query a database using SQLAlchemy</li> <li>Assignment 5.1: Create a web application that uses SQLAlchemy to interact with a database</li> </ul> <p>Resources</p> <ul> <li>SQL Tutorial</li> <li>SQLAlchemy Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Six: Deployment and Security</p> <p>Overview</p> <ul> <li>Introduction to deployment and security</li> <li>Deploying web applications to the cloud</li> <li>Securing web applications</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to deployment</li> <li>Deployment methods and strategies</li> <li>Introduction to security</li> <li>Web application security threats</li> <li>Securing web applications</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 6.1: Deploy a web application to the cloud</li> <li>Activity 6.2: Secure a web application</li> <li>Assignment 6.1: Create a web application that is deployed to the cloud and secured</li> </ul> <p>Resources</p> <ul> <li>AWS Tutorial</li> <li>Azure Tutorial</li> <li>Google Cloud Tutorial</li> </ul> <p>Week Seven: Project Development</p> <p>Overview</p> <ul> <li>Introduction to project development</li> <li>Planning and designing a web application</li> <li>Developing and testing a web application</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to project development</li> <li>Project planning and design</li> <li>Web application development</li> <li>Web application testing</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 7.1: Plan and design a web application</li> <li>Activity 7.2: Develop and test a web application</li> <li>Assignment 7.1: Create a web application that meets the requirements of the project brief</li> </ul> <p>Resources</p> <ul> <li>Project Management Tutorial</li> <li>Agile Development Tutorial</li> <li>Testing Tutorial</li> </ul> <p>Week Eight: Project Presentation</p> <p>Overview</p> <ul> <li>Presentation of student projects</li> <li>Feedback and discussion</li> </ul> <p>Topics Covered</p> <ul> <li>Project presentations</li> <li>Feedback and discussion</li> </ul> <p>Activities and Assignments</p> <ul> <li>Present your project to the class</li> <li>Receive feedback from your classmates and the instructor</li> <li>Discuss the project outcomes and lessons learned</li> </ul> <p>Resources</p> <ul> <li>Presentation Skills Tutorial</li> <li>Feedback and Discussion Guide</li> </ul> <p>Week Nine: Wrap-Up and Assessment</p> <p>Overview</p> <ul> <li>Course wrap-up</li> <li>Assessment of student learning</li> </ul> <p>Topics Covered</p> <ul> <li>Course wrap-up</li> <li>Assessment of student learning</li> </ul> <p>Activities and Assignments</p> <ul> <li>Complete the course evaluation</li> <li>Submit your final project for assessment</li> </ul> <p>Resources</p> <ul> <li>Course Evaluation Form</li> <li>Project Assessment Rubric</li> </ul>"},{"location":"week2/Week%202_annotated/","title":"Week 2_annotated.pdf (PDF file)","text":""},{"location":"week2/Week%202_annotated/#week-2_annotatedpdf-pdf-file","title":"Week 2_annotated.pdf (PDF file)).","text":"<p>Summary Information Representation</p> <ul> <li>Computers process only binary digits (bits) as 0s and 1s.</li> <li>Numbers are represented using place value or two's complement for negative values.</li> <li>Text characters are represented as bit sequences.</li> </ul> <p>Character Encodings</p> <ul> <li>ASCII: 7-bit encoding for basic English characters.</li> <li>Unicode: Expanded encoding for various languages and symbols.</li> <li>UTF-8: Variable-length encoding based on Unicode, efficient for most common languages.</li> </ul> <p>Markup</p> <ul> <li>Markup distinguishes content from meaning.</li> <li>Presentational markup focuses on styling (e.g., bold, ).</li> <li>Procedural markup provides instructions for display (e.g., change font size).</li> <li>Descriptive markup indicates structural elements (e.g., , ).</li> </ul> <p>HTML</p> <ul> <li>HyperText Markup Language used for web documents.</li> <li>Tags indicate document structure and content (e.g., , </li> <li>HTML5 introduces new elements and multimedia support.</li> <li>Document Object Model (DOM) represents the logical structure of an HTML document.</li> </ul> <p>Styling</p> <ul> <li>CSS (Cascading Style Sheets) separates presentation from content.</li> <li>CSS rules can be embedded within HTML, defined internally within a </li></ul>"}]}