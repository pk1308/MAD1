{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>Comprehensive HTML cheat sheet</p> <pre><code># HTML Cheat Sheet\n\n## Basic Structure\n\n```html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Page Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Content goes here --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"#document-metadata","title":"Document Metadata","text":"<pre><code>&lt;!DOCTYPE html&gt; &lt;!-- Document type declaration --&gt;\n&lt;html lang=\"en\"&gt; &lt;!-- Sets the language of the document --&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt; &lt;!-- Character encoding --&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;!-- Responsive design --&gt;\n    &lt;title&gt;Document&lt;/title&gt; &lt;!-- Document title --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Body content --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"#headings","title":"Headings","text":"<pre><code>&lt;h1&gt;This is a Heading 1&lt;/h1&gt;\n&lt;h2&gt;This is a Heading 2&lt;/h2&gt;\n&lt;h3&gt;This is a Heading 3&lt;/h3&gt;\n&lt;h4&gt;This is a Heading 4&lt;/h4&gt;\n&lt;h5&gt;This is a Heading 5&lt;/h5&gt;\n&lt;h6&gt;This is a Heading 6&lt;/h6&gt;\n</code></pre>"},{"location":"#paragraphs-and-line-breaks","title":"Paragraphs and Line Breaks","text":"<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;\n&lt;p&gt;This is another paragraph.&lt;/p&gt;\n&lt;p&gt;This is a paragraph with a &lt;br&gt; line break.&lt;/p&gt;\n</code></pre>"},{"location":"#text-formatting","title":"Text Formatting","text":"<pre><code>&lt;b&gt;Bold&lt;/b&gt; or &lt;strong&gt;Strong&lt;/strong&gt; &lt;!-- Bold text --&gt;\n&lt;i&gt;Italic&lt;/i&gt; or &lt;em&gt;Emphasized&lt;/em&gt; &lt;!-- Italic text --&gt;\n&lt;u&gt;Underline&lt;/u&gt; &lt;!-- Underlined text --&gt;\n&lt;del&gt;Deleted&lt;/del&gt; &lt;!-- Strikethrough text --&gt;\n&lt;mark&gt;Highlighted&lt;/mark&gt; &lt;!-- Highlighted text --&gt;\n&lt;sup&gt;Superscript&lt;/sup&gt; &lt;!-- Superscript text --&gt;\n&lt;sub&gt;Subscript&lt;/sub&gt; &lt;!-- Subscript text --&gt;\n</code></pre>"},{"location":"#links","title":"Links","text":"<pre><code>&lt;a href=\"https://www.example.com\"&gt;This is a link&lt;/a&gt; &lt;!-- Simple link --&gt;\n&lt;a href=\"https://www.example.com\" target=\"_blank\"&gt;Open link in new tab&lt;/a&gt; &lt;!-- Open in new tab --&gt;\n&lt;a href=\"mailto:someone@example.com\"&gt;Send Email&lt;/a&gt; &lt;!-- Email link --&gt;\n&lt;a href=\"tel:+1234567890\"&gt;Call Number&lt;/a&gt; &lt;!-- Phone link --&gt;\n</code></pre>"},{"location":"#lists","title":"Lists","text":""},{"location":"#unordered-list","title":"Unordered List","text":"<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"#ordered-list","title":"Ordered List","text":"<pre><code>&lt;ol&gt;\n    &lt;li&gt;First item&lt;/li&gt;\n    &lt;li&gt;Second item&lt;/li&gt;\n    &lt;li&gt;Third item&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"#definition-list","title":"Definition List","text":"<pre><code>&lt;dl&gt;\n    &lt;dt&gt;Term 1&lt;/dt&gt;\n    &lt;dd&gt;Definition of Term 1&lt;/dd&gt;\n    &lt;dt&gt;Term 2&lt;/dt&gt;\n    &lt;dd&gt;Definition of Term 2&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre>"},{"location":"#images","title":"Images","text":"<pre><code>&lt;img src=\"image.jpg\" alt=\"Description of Image\"&gt; &lt;!-- Basic image --&gt;\n&lt;img src=\"image.jpg\" alt=\"Description of Image\" width=\"500\" height=\"600\"&gt; &lt;!-- Image with size --&gt;\n</code></pre>"},{"location":"#tables","title":"Tables","text":"<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Header 1&lt;/th&gt;\n        &lt;th&gt;Header 2&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Data 1&lt;/td&gt;\n        &lt;td&gt;Data 2&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"#forms","title":"Forms","text":"<pre><code>&lt;form action=\"/submit-form\" method=\"post\"&gt;\n    &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"name\"&gt;\n\n    &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;\n\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"#common-form-elements","title":"Common Form Elements","text":"<pre><code>&lt;input type=\"text\" placeholder=\"Text input\"&gt; &lt;!-- Single-line text input --&gt;\n&lt;input type=\"password\" placeholder=\"Password\"&gt; &lt;!-- Password input --&gt;\n&lt;input type=\"email\" placeholder=\"Email address\"&gt; &lt;!-- Email input --&gt;\n&lt;textarea placeholder=\"Multi-line text input\"&gt;&lt;/textarea&gt; &lt;!-- Multi-line text input --&gt;\n&lt;select&gt;\n    &lt;option value=\"option1\"&gt;Option 1&lt;/option&gt;\n    &lt;option value=\"option2\"&gt;Option 2&lt;/option&gt;\n&lt;/select&gt; &lt;!-- Drop-down list --&gt;\n&lt;input type=\"radio\" name=\"radio\" value=\"option1\"&gt; Option 1 &lt;!-- Radio button --&gt;\n&lt;input type=\"checkbox\" name=\"checkbox\" value=\"option1\"&gt; Option 1 &lt;!-- Checkbox --&gt;\n</code></pre>"},{"location":"#semantic-html","title":"Semantic HTML","text":"<pre><code>&lt;header&gt;\n    &lt;!-- Header content --&gt;\n&lt;/header&gt;\n\n&lt;nav&gt;\n    &lt;!-- Navigation links --&gt;\n&lt;/nav&gt;\n\n&lt;main&gt;\n    &lt;!-- Main content --&gt;\n&lt;/main&gt;\n\n&lt;article&gt;\n    &lt;!-- Article content --&gt;\n&lt;/article&gt;\n\n&lt;section&gt;\n    &lt;!-- Section content --&gt;\n&lt;/section&gt;\n\n&lt;aside&gt;\n    &lt;!-- Sidebar content --&gt;\n&lt;/aside&gt;\n\n&lt;footer&gt;\n    &lt;!-- Footer content --&gt;\n&lt;/footer&gt;\n</code></pre>"},{"location":"#media","title":"Media","text":""},{"location":"#audio","title":"Audio","text":"<pre><code>&lt;audio controls&gt;\n    &lt;source src=\"audio.mp3\" type=\"audio/mpeg\"&gt;\n    Your browser does not support the audio element.\n&lt;/audio&gt;\n</code></pre>"},{"location":"#video","title":"Video","text":"<pre><code>&lt;video controls&gt;\n    &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n    Your browser does not support the video element.\n&lt;/video&gt;\n</code></pre>"},{"location":"#embedding","title":"Embedding","text":""},{"location":"#iframe","title":"Iframe","text":"<pre><code>&lt;iframe src=\"https://www.example.com\" title=\"Iframe Example\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"#embed","title":"Embed","text":"<pre><code>&lt;embed src=\"file.pdf\" type=\"application/pdf\"&gt;\n</code></pre>"},{"location":"#object","title":"Object","text":"<pre><code>&lt;object data=\"file.pdf\" type=\"application/pdf\"&gt;\n    &lt;p&gt;Alternative text for browsers that do not support the object element.&lt;/p&gt;\n&lt;/object&gt;\n</code></pre>"},{"location":"#scripting","title":"Scripting","text":""},{"location":"#internal-javascript","title":"Internal JavaScript","text":"<pre><code>&lt;script&gt;\n    console.log('Hello, world!');\n&lt;/script&gt;\n</code></pre>"},{"location":"#external-javascript","title":"External JavaScript","text":"<pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"#meta-tags","title":"Meta Tags","text":"<pre><code>&lt;meta charset=\"UTF-8\"&gt; &lt;!-- Character encoding --&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;!-- Responsive design --&gt;\n&lt;meta name=\"description\" content=\"Description of the webpage\"&gt; &lt;!-- Description --&gt;\n&lt;meta name=\"keywords\" content=\"HTML, CSS, JavaScript\"&gt; &lt;!-- Keywords --&gt;\n&lt;meta name=\"author\" content=\"Author Name\"&gt; &lt;!-- Author --&gt;\n</code></pre>"},{"location":"#miscellaneous","title":"Miscellaneous","text":""},{"location":"#comments","title":"Comments","text":"<pre><code>&lt;!-- This is a comment --&gt;\n</code></pre>"},{"location":"#doctype","title":"Doctype","text":"<pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>"},{"location":"#character-encoding","title":"Character Encoding","text":"<pre><code>&lt;meta charset=\"UTF-8\"&gt;\n</code></pre>"},{"location":"#html-entities","title":"HTML Entities","text":"<pre><code>&lt;  &lt;!-- Less than --&gt;\n&gt;  &lt;!-- Greater than --&gt;\n&amp; &lt;!-- Ampersand --&gt;\n\" &lt;!-- Double quote --&gt;\n' &lt;!-- Single quote --&gt;\n\u00a9 &lt;!-- Copyright --&gt;\n\u00ae &lt;!-- Registered trademark --&gt;\n\u00a0 &lt;!-- Non-breaking space --&gt;\n</code></pre> <p>This cheat sheet covers a broad range of basic and advanced HTML elements and attributes. Feel free to expand it with more specific tags and use cases as needed!</p>"},{"location":"Flask/","title":"Flask","text":"<p>comprehensive Flask cheat sheet :</p> <pre><code># Flask Cheat Sheet\n\n## Setup\n\n### Installation\n\n```sh\npip install Flask\n</code></pre>"},{"location":"Flask/#basic-structure","title":"Basic Structure","text":"<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return \"Hello, Flask!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"Flask/#routes","title":"Routes","text":""},{"location":"Flask/#basic-route","title":"Basic Route","text":"<pre><code>@app.route('/')\ndef home():\n    return \"Home Page\n\n### Route with Variable\n\n```python\n@app.route('/user/&lt;username&gt;')\ndef show_user(username):\n    return f\"User: {username}\"\n</code></pre>"},{"location":"Flask/#variable-types","title":"Variable Types","text":"<pre><code>@app.route('/post/&lt;int:post_id&gt;')\ndef show_post(post_id):\n    return f\"Post ID: {post_id}\"\n</code></pre>"},{"location":"Flask/#http-methods","title":"HTTP Methods","text":"<pre><code>@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        return \"Logging in...\"\n    else:\n        return \"Login Page\"\n</code></pre>"},{"location":"Flask/#rendering-templates","title":"Rendering Templates","text":""},{"location":"Flask/#html-template","title":"HTML Template","text":"<p>Create a directory called <code>templates</code> and a file <code>index.html</code> inside it:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Home Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;{{ title }}&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Flask/#render-template","title":"Render Template","text":"<pre><code>from flask import render_template\n\n@app.route('/')\ndef home():\n    return render_template('index.html', title='Home', message='Welcome to Flask!')\n</code></pre>"},{"location":"Flask/#template-inheritance","title":"Template Inheritance","text":""},{"location":"Flask/#base-template-basehtml","title":"Base Template (<code>base.html</code>)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Flask/#child-template-childhtml","title":"Child Template (<code>child.html</code>)","text":"<pre><code>{% extends \"base.html\" %}\n\n{% block title %}Child Page{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;This is the child page.&lt;/h1&gt;\n{% endblock %}\n</code></pre>"},{"location":"Flask/#render-child-template","title":"Render Child Template","text":"<pre><code>@app.route('/child')\ndef child():\n    return render_template('child.html')\n</code></pre>"},{"location":"Flask/#static-files","title":"Static Files","text":""},{"location":"Flask/#serving-static-files","title":"Serving Static Files","text":"<p>Place your static files (CSS, JS, images) in the <code>static</code> directory.</p>"},{"location":"Flask/#accessing-static-files","title":"Accessing Static Files","text":"<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{{ url_for('static', filename='style.css') }}\"&gt;\n</code></pre>"},{"location":"Flask/#forms-and-request-data","title":"Forms and Request Data","text":""},{"location":"Flask/#simple-form","title":"Simple Form","text":"<pre><code>&lt;form method=\"POST\" action=\"/submit\"&gt;\n    &lt;input type=\"text\" name=\"username\"&gt;\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Flask/#handling-form-submission","title":"Handling Form Submission","text":"<pre><code>from flask import request\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    username = request.form['username']\n    return f\"Submitted: {username}\"\n</code></pre>"},{"location":"Flask/#redirects-and-urls","title":"Redirects and URLs","text":""},{"location":"Flask/#redirect","title":"Redirect","text":"<pre><code>from flask import redirect\n\n@app.route('/go-to-home')\ndef go_to_home():\n    return redirect('/')\n</code></pre>"},{"location":"Flask/#url-generation","title":"URL Generation","text":"<pre><code>from flask import url_for\n\n@app.route('/admin')\ndef admin():\n    return redirect(url_for('home'))\n</code></pre>"},{"location":"Flask/#flash-messages","title":"Flash Messages","text":""},{"location":"Flask/#setting-up-flash-messages","title":"Setting Up Flash Messages","text":"<pre><code>from flask import flash\n\n@app.route('/flash-example')\ndef flash_example():\n    flash('This is a flash message.')\n    return redirect('/')\n</code></pre>"},{"location":"Flask/#displaying-flash-messages","title":"Displaying Flash Messages","text":"<p>In your template (e.g., <code>index.html</code>):</p> <pre><code>{% with messages = get_flashed_messages() %}\n  {% if messages %}\n    &lt;ul&gt;\n    {% for message in messages %}\n      &lt;li&gt;{{ message }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n  {% endif %}\n{% endwith %}\n</code></pre>"},{"location":"Flask/#sessions","title":"Sessions","text":""},{"location":"Flask/#using-sessions","title":"Using Sessions","text":"<pre><code>from flask import session\n\napp.secret_key = 'supersecretkey'\n\n@app.route('/set-session')\ndef set_session():\n    session['username'] = 'admin'\n    return 'Session set!'\n\n@app.route('/get-session')\ndef get_session():\n    username = session.get('username')\n    return f'Session username: {username}'\n</code></pre>"},{"location":"Flask/#error-handling","title":"Error Handling","text":""},{"location":"Flask/#custom-error-pages","title":"Custom Error Pages","text":"<pre><code>@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n</code></pre>"},{"location":"Flask/#404-template-404html","title":"404 Template (<code>404.html</code>)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Page Not Found&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;404 - Page Not Found&lt;/h1&gt;\n    &lt;p&gt;The page you are looking for does not exist.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Flask/#json-responses","title":"JSON Responses","text":""},{"location":"Flask/#returning-json","title":"Returning JSON","text":"<pre><code>from flask import jsonify\n\n@app.route('/api/data')\ndef get_data():\n    data = {'key': 'value'}\n    return jsonify(data)\n</code></pre>"},{"location":"Flask/#database-integration-flask-sqlalchemy","title":"Database Integration (Flask-SQLAlchemy)","text":""},{"location":"Flask/#installation","title":"Installation","text":"<pre><code>pip install Flask-SQLAlchemy\n</code></pre>"},{"location":"Flask/#setup","title":"Setup","text":"<pre><code>from flask_sqlalchemy import SQLAlchemy\n\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(150), nullable=False)\n\n@app.route('/add-user')\ndef add_user():\n    user = User(username='admin')\n    db.session.add(user)\n    db.session.commit()\n    return 'User added!'\n</code></pre>"},{"location":"Flask/#flask-extensions","title":"Flask Extensions","text":""},{"location":"Flask/#flask-migrate","title":"Flask-Migrate","text":"<pre><code>pip install Flask-Migrate\n</code></pre>"},{"location":"Flask/#setup-flask-migrate","title":"Setup Flask-Migrate","text":"<pre><code>from flask_migrate import Migrate\n\nmigrate = Migrate(app, db)\n\n# Run migrations\n# flask db init\n# flask db migrate -m \"Initial migration.\"\n# flask db upgrade\n</code></pre>"},{"location":"Flask/#running-the-app","title":"Running the App","text":""},{"location":"Flask/#run-the-development-server","title":"Run the Development Server","text":"<pre><code>export FLASK_APP=app.py\nexport FLASK_ENV=development\nflask run\n</code></pre> <p>This cheat sheet covers the essential elements and features of Flask for quick reference. Feel free to expand it with more specific use cases and Flask extensions as needed!</p> <pre><code>\n</code></pre>"},{"location":"css/","title":"Css","text":"<p>comprehensive CSS cheat sheet</p> <pre><code># CSS Cheat Sheet\n\n## Basic Syntax\n\n```css\nselector {\n    property: value;\n}\n</code></pre>"},{"location":"css/#selectors","title":"Selectors","text":""},{"location":"css/#universal-selector","title":"Universal Selector","text":"<pre><code>* {\n    margin: 0;\n    padding: 0;\n}\n</code></pre>"},{"location":"css/#element-selector","title":"Element Selector","text":"<pre><code>p {\n    color: blue;\n}\n</code></pre>"},{"location":"css/#class-selector","title":"Class Selector","text":"<pre><code>.className {\n    font-size: 14px;\n}\n</code></pre>"},{"location":"css/#id-selector","title":"ID Selector","text":"<pre><code>#idName {\n    background-color: yellow;\n}\n</code></pre>"},{"location":"css/#attribute-selector","title":"Attribute Selector","text":"<pre><code>input[type=\"text\"] {\n    border: 1px solid #000;\n}\n</code></pre>"},{"location":"css/#pseudo-class-selector","title":"Pseudo-class Selector","text":"<pre><code>a:hover {\n    color: red;\n}\n</code></pre>"},{"location":"css/#pseudo-element-selector","title":"Pseudo-element Selector","text":"<pre><code>p::first-line {\n    font-weight: bold;\n}\n</code></pre>"},{"location":"css/#box-model","title":"Box Model","text":""},{"location":"css/#margin","title":"Margin","text":"<pre><code>div {\n    margin: 20px;\n    margin-top: 10px;\n    margin-right: 15px;\n    margin-bottom: 10px;\n    margin-left: 5px;\n}\n</code></pre>"},{"location":"css/#padding","title":"Padding","text":"<pre><code>div {\n    padding: 20px;\n    padding-top: 10px;\n    padding-right: 15px;\n    padding-bottom: 10px;\n    padding-left: 5px;\n}\n</code></pre>"},{"location":"css/#border","title":"Border","text":"<pre><code>div {\n    border: 1px solid black;\n    border-width: 2px;\n    border-style: dashed;\n    border-color: blue;\n}\n</code></pre>"},{"location":"css/#width-and-height","title":"Width and Height","text":"<pre><code>div {\n    width: 100px;\n    height: 50px;\n}\n</code></pre>"},{"location":"css/#background","title":"Background","text":"<pre><code>body {\n    background-color: #f0f0f0;\n    background-image: url('background.jpg');\n    background-repeat: no-repeat;\n    background-attachment: fixed;\n    background-position: center;\n    background-size: cover;\n}\n</code></pre>"},{"location":"css/#text","title":"Text","text":""},{"location":"css/#color","title":"Color","text":"<pre><code>p {\n    color: #333;\n}\n</code></pre>"},{"location":"css/#font","title":"Font","text":"<pre><code>p {\n    font-family: Arial, sans-serif;\n    font-size: 16px;\n    font-weight: bold;\n    font-style: italic;\n    line-height: 1.5;\n    text-align: center;\n    text-decoration: underline;\n    text-transform: uppercase;\n    text-indent: 50px;\n    letter-spacing: 2px;\n    word-spacing: 5px;\n}\n</code></pre>"},{"location":"css/#lists","title":"Lists","text":""},{"location":"css/#unordered-list","title":"Unordered List","text":"<pre><code>ul {\n    list-style-type: disc;\n    list-style-position: inside;\n}\n</code></pre>"},{"location":"css/#ordered-list","title":"Ordered List","text":"<pre><code>ol {\n    list-style-type: decimal;\n    list-style-position: outside;\n}\n</code></pre>"},{"location":"css/#display-and-positioning","title":"Display and Positioning","text":""},{"location":"css/#display","title":"Display","text":"<pre><code>div {\n    display: none; /* block, inline, inline-block, flex, grid */\n}\n</code></pre>"},{"location":"css/#position","title":"Position","text":"<pre><code>div {\n    position: static; /* relative, absolute, fixed, sticky */\n    top: 10px;\n    right: 10px;\n    bottom: 10px;\n    left: 10px;\n}\n</code></pre>"},{"location":"css/#float-and-clear","title":"Float and Clear","text":"<pre><code>div {\n    float: left; /* right, none */\n    clear: both; /* left, right, none */\n}\n</code></pre>"},{"location":"css/#z-index","title":"Z-index","text":"<pre><code>div {\n    position: relative;\n    z-index: 10;\n}\n</code></pre>"},{"location":"css/#flexbox","title":"Flexbox","text":""},{"location":"css/#container","title":"Container","text":"<pre><code>.container {\n    display: flex;\n    flex-direction: row; /* row-reverse, column, column-reverse */\n    flex-wrap: nowrap; /* wrap, wrap-reverse */\n    justify-content: flex-start; /* center, flex-end, space-between, space-around, space-evenly */\n    align-items: stretch; /* flex-start, center, flex-end, baseline */\n    align-content: stretch; /* flex-start, center, flex-end, space-between, space-around */\n}\n</code></pre>"},{"location":"css/#item","title":"Item","text":"<pre><code>.item {\n    flex: 0 1 auto; /* flex-grow, flex-shrink, flex-basis */\n    align-self: auto; /* flex-start, center, flex-end, baseline, stretch */\n    order: 0;\n}\n</code></pre>"},{"location":"css/#grid","title":"Grid","text":""},{"location":"css/#container_1","title":"Container","text":"<pre><code>.container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); /* or 100px 1fr 2fr */\n    grid-template-rows: repeat(2, auto); /* or 100px 200px */\n    gap: 10px; /* row-gap, column-gap */\n    grid-auto-flow: row; /* column, dense */\n}\n</code></pre>"},{"location":"css/#item_1","title":"Item","text":"<pre><code>.item {\n    grid-column: 1 / 3; /* or span 2 */\n    grid-row: 1 / 2; /* or span 1 */\n    justify-self: center; /* start, end, stretch */\n    align-self: center; /* start, end, stretch */\n}\n</code></pre>"},{"location":"css/#media-queries","title":"Media Queries","text":"<pre><code>@media (max-width: 600px) {\n    body {\n        background-color: lightblue;\n    }\n}\n</code></pre>"},{"location":"css/#animations","title":"Animations","text":""},{"location":"css/#keyframes","title":"Keyframes","text":"<pre><code>@keyframes example {\n    from {background-color: red;}\n    to {background-color: yellow;}\n}\n</code></pre>"},{"location":"css/#animation","title":"Animation","text":"<pre><code>div {\n    animation-name: example;\n    animation-duration: 4s;\n    animation-timing-function: linear; /* ease, ease-in, ease-out, ease-in-out */\n    animation-delay: 2s;\n    animation-iteration-count: infinite; /* or a number */\n    animation-direction: alternate; /* normal, reverse, alternate-reverse */\n    animation-fill-mode: forwards; /* none, backwards, both */\n    animation-play-state: running; /* paused */\n}\n</code></pre>"},{"location":"css/#transitions","title":"Transitions","text":"<pre><code>div {\n    transition-property: background-color;\n    transition-duration: 2s;\n    transition-timing-function: ease-in-out; /* linear, ease, ease-in, ease-out */\n    transition-delay: 1s;\n}\n</code></pre>"},{"location":"css/#transform","title":"Transform","text":"<pre><code>div {\n    transform: translate(50px, 100px);\n    transform: rotate(45deg);\n    transform: scale(1.5);\n    transform: skew(20deg, 10deg);\n    transform-origin: top left;\n}\n</code></pre>"},{"location":"css/#variables","title":"Variables","text":"<pre><code>:root {\n    --main-color: #06c;\n    --padding: 10px;\n}\ndiv {\n    color: var(--main-color);\n    padding: var(--padding);\n}\n</code></pre>"},{"location":"css/#miscellaneous","title":"Miscellaneous","text":""},{"location":"css/#overflow","title":"Overflow","text":"<pre><code>div {\n    overflow: hidden; /* auto, scroll, visible */\n}\n</code></pre>"},{"location":"css/#opacity","title":"Opacity","text":"<pre><code>div {\n    opacity: 0.5;\n}\n</code></pre>"},{"location":"css/#visibility","title":"Visibility","text":"<pre><code>div {\n    visibility: hidden; /* visible, collapse */\n}\n</code></pre>"},{"location":"css/#cursor","title":"Cursor","text":"<pre><code>div {\n    cursor: pointer; /* default, crosshair, text, wait, help, not-allowed, etc. */\n}\n</code></pre>"},{"location":"css/#box-shadow","title":"Box Shadow","text":"<pre><code>div {\n    box-shadow: 10px 10px 5px #888888;\n}\n</code></pre>"},{"location":"css/#text-shadow","title":"Text Shadow","text":"<pre><code>p {\n    text-shadow: 2px 2px 5px #555555;\n}\n</code></pre>"},{"location":"css/#outline","title":"Outline","text":"<pre><code>div {\n    outline: 2px solid red;\n    outline-offset: 5px;\n}\n</code></pre> <p>This CSS cheat sheet covers a wide range of CSS properties and techniques. Feel free to expand it with more specific properties and use cases as needed!</p> <pre><code>\n</code></pre>"},{"location":"arifacts/viva/","title":"viva.pdf (PDF file)","text":""},{"location":"arifacts/viva/#vivapdf-pdf-file","title":"viva.pdf (PDF file)","text":"<p>Summary db.Model vs db.Table: - db.Model: For data models with associated methods. - db.Table: For table structures without additional features.</p> <p>HTTP Methods: - GET: Retrieve a resource. - POST: Create a new resource. - PUT: Update an existing resource. - DELETE: Remove a resource. - PATCH: Update a portion of a resource.</p> <p>MVC Architecture: - Model: Handles data and logic. - View: Displays data to the user. - Controller: Manages user input and updates the Model and View.</p> <p>Relationships in Databases: - Define how data in different tables is related. - Types: One-to-One, One-to-Many, Many-to-Many.</p> <p>Normalization: - Organizes data to reduce redundancy and dependence. - Levels: First, Second, Third.</p> <p>ACID vs BASE: - ACID: Guarantees transactions are atomic, consistent, isolated, and durable. - BASE: Emphasizes availability, soft state, and eventual consistency.</p> <p>Primary Key and Unique Key: - Primary Key: Uniquely identifies each record in a table and cannot contain null values. - Unique Key: Ensures uniqueness but allows one null value.</p> <p>Exception Handling: - try: Contains code that may raise an exception. - except: Catches and handles specific exceptions. - finally: Code that will execute regardless of whether an exception occurred.</p> <p>Error Handler: - Used to handle errors in a web application. - Maps specific HTTP status codes to appropriate error messages and actions.</p> <p>Cluster: - A method of organizing or storing data to improve performance. - Types: Index clusters (optimize query performance) and table clusters (store related data together).</p> <p>Authentication vs Authorization: - Authentication: Verifying the identity of a user or system. - Authorization: Determining what actions or resources an authenticated entity can access.</p> <p>Cell Padding and Cell Spacing: - Cell Padding: Space between text and cell itself. - Cell Spacing: Space between cells.</p> <p>Rest API and its Methods: - RESTful API: An architectural style for designing networked applications. - Methods: GET (fetch data), POST (submit data), PUT (update/create data), DELETE (remove data), PATCH (make a small update)</p> <p>SQLAlchemy: - A Python library that simplifies database interactions using an Object-Relational Mapping (ORM) system. - Provides classes that mirror database tables, making database operations more Pythonic.</p> <p>ORM: - Object-Relational Mapping allows you to interact with a database using objects in your programming language. - Simplifies database interactions by representing tables as classes and rows as instances of those classes.</p> <p>Controller Sends and Receives API: - The controller in a web application handles HTTP requests and sends and receives API data. - Requests are processed, and appropriate responses are sent using libraries like 'requests'. - The controller interacts with databases and business logic to handle API interactions.</p> <p>@app.route(): - A Flask decorator used to associate a function with a URL route. - Informs Flask which function to execute when a particular URL is accessed.</p> <p>Template Inheritance: - Allows you to create a base or parent template with a common structure. - Other templates can then inherit from this base template and customize specific content sections.</p> <p>Lazy Loading: - A technique where resources or data are loaded only when needed, improving the initial page load time. - Commonly used with images, scripts, or other assets on a webpage.</p> <p>Single Page Application (SPA): - A web application where the initial page load contains all necessary content, and subsequent interactions dynamically update the page without requiring full page reloads. - Provides a more responsive and interactive user experience.</p> <p>Flask: - A lightweight and flexible web framework for Python. - Provides a simple and extensible platform for building web applications.</p> <p>2-Tier vs 3-Tier Architecture: - 2-Tier: Client-server model with direct communication between client and server. - 3-Tier: Introduces an application layer between client and server, providing an additional layer of business logic and improved scalability.</p> <p>Static vs Dynamic Pages: - Static Pages: Content is pre-generated and remains unchanged unless manually modified. - Dynamic Pages: Content is generated on-demand based on user interactions or data from databases.</p> <p>Types of Testing: - Unit Testing: Testing individual components of software. - White Box Testing: Examining the internal structure of software. - Black Box Testing: Testing software functionality without knowing its internal code. - Integrated Testing: Verifying interactions between integrated components or systems.</p> <p>List vs Tuple vs Dictionary: - List: Mutable sequence of elements. - Tuple: Immutable sequence of elements. - Dictionary: Collection of key-value pairs.</p> <p>Primary Keys: - Unique identifiers assigned to each record in a table. - Ensure data integrity, efficient data retrieval, and relationships between tables.</p> <p>Bootstrap: - A front-end framework providing pre-designed and reusable components for creating visually appealing and mobile-friendly user interfaces.</p> <p>Indexing: - A technique that enhances the speed of data retrieval operations by creating data structures (indexes) to quickly locate and access specific records.</p> <p>Git: - A distributed version control system that enables collaboration, history tracking, and version control in software development.</p> <p>Built-in HTML5 Form Controls: - Provide partial validation, such as required fields, minimum or maximum values, and custom patterns.</p> <p>Sandboxing: - A secure area provided by JavaScript engines to run code without accessing local files or network resources. Lec file</p>"},{"location":"arifacts/viva/#vivapdf-pdf-file_1","title":"viva.pdf (PDF file)","text":""},{"location":"reference/embeding/","title":"Embeding","text":""},{"location":"week1/Week%201_annotated/","title":"Week 1_annotated.pdf (PDF file)","text":""},{"location":"week1/Week%201_annotated/#week-1_annotatedpdf-pdf-file","title":"Week 1_annotated.pdf (PDF file)","text":"<p>Summary Apps</p> <ul> <li>Software that runs on mobile devices, typically specific and compact.</li> <li>Originally referred to desktop or mobile applications, but now focuses on small, downloadable programs.</li> </ul> <p>Desktop Apps</p> <ul> <li>Standalone, often offline</li> <li>Use local data storage</li> <li>Specific frameworks for each OS</li> </ul> <p>Mobile Apps</p> <ul> <li>Designed for mobile platforms (phones/tablets)</li> <li>Limited screen space, touch interaction</li> <li>Frameworks vary by OS and platform</li> <li>Network-oriented</li> </ul> <p>Web Apps</p> <ul> <li>Platform-independent</li> <li>Work across devices and OS</li> </ul> <p>Components of Applications</p> <ul> <li>Storage: Where data is stored</li> <li>Computation: Indexing, searching, etc.</li> <li>Presentation: Displaying content</li> </ul> <p>Platforms</p> <ul> <li>Desktop, mobile, web-based, embedded</li> <li>Platform features vary (e.g., keyboard/mouse, touchscreen, etc.)</li> </ul> <p>Architectures</p> <ul> <li>Client-Server: Explicit server and client</li> <li>Distributed (Peer-to-Peer): All peers are considered equal</li> </ul> <p>Client-Server Model</p> <ul> <li>Explicit differentiation between clients and servers</li> <li>May have local clients on same machine</li> <li>Variants include multiple servers, load balancing, etc.</li> </ul> <p>Distributed (Peer-to-Peer) Model</p> <ul> <li>All peers are equal</li> <li>Error tolerance and shared information</li> </ul> <p>Software Architecture Patterns</p> <ul> <li>MVC (Model-View-Controller): Core data, user interface, and business logic</li> <li>MVA, MVP, HMVC, MVVM, etc.</li> </ul> <p>Focus of the Course</p> <ul> <li>Platform: Web-based</li> <li>Architecture: Client-server</li> <li>Software architecture: Model-View-Controller</li> <li>Building apps that use web-based servers and hypertext markup for display</li> </ul> <p>The Web</p> <ul> <li>Platform choice for the course</li> <li>Generic, cross-platform, and worth understanding</li> <li>Constraints and costs to consider</li> </ul> <p>Historical Background of the Web</p> <ul> <li>Telephone networks (circuit switching)</li> <li>Packet switched networks</li> <li>ARPANet, Ethernet, etc.</li> <li>Protocols and inter-network communication</li> <li>IP and TCP</li> <li>Domain names, hypertext, and the World Wide Web</li> </ul> <p>Web 2.0</p> <ul> <li>Dynamic pages, HTTP transport mechanism, client-side computation</li> <li>Platform agnostic operating system</li> </ul> <p>Performance of Web Apps</p> <ul> <li>Latency and response size impact performance</li> <li>Server resources, storage requirements, and client compute resources also affect speed</li> </ul> <p>Web Servers</p> <ul> <li>Any computer with a network connection</li> <li>Listen for incoming requests and respond accordingly</li> <li>Follow specific protocols</li> </ul> <p>HTTP (HyperText Transfer Protocol)</p> <ul> <li>Text-based protocol for client requests and server responses</li> <li>Specifies request types (GET, POST, PUT, etc.)</li> <li>Headers convey request information and server capabilities</li> </ul> <p>Protocol</p> <ul> <li>Defines communication methods between server and client</li> <li>HTTP specifies request types, headers, and response formats</li> </ul> <p>Use Cases of HTTP</p> <ul> <li>GET: Simple requests</li> <li>POST: Complex form data, file uploads</li> <li>PUT/DELETE: Extensively used in Web 2.0 and APIs</li> </ul> <p>Memory and Storage Requirements</p> <ul> <li>Server processes can require significant memory for concurrent requests</li> <li>Search engines like Google may need massive data storage for indexing and cross-referencing web pages Lec file</li> </ul>"},{"location":"week1/Week%201_annotated/#week-1_annotatedpdf-pdf-file_1","title":"Week 1_annotated.pdf (PDF file)","text":""},{"location":"week1/pq_session/","title":"Pq session","text":""},{"location":"week1/week_activity1/","title":"Week activity1","text":"<p>LectureSummary</p> <p>Week One: Course Overview, Web Architecture, and Network Fundamentals</p> <p>Overview</p> <ul> <li>Introduction to the course and its objectives</li> <li>Overview of the different components of web applications</li> <li>Introduction to web architecture and network fundamentals</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to the course</li> <li>What is web development?</li> <li>The different components of web applications</li> <li>Web architecture</li> <li>Network fundamentals</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 1.1: Identify the different components of a web application</li> <li>Activity 1.2: Explain the basic concepts of web architecture</li> <li>Assignment 1.1: Write a simple HTML document</li> </ul> <p>Resources</p> <ul> <li>HTML Tutorial</li> <li>CSS Tutorial</li> <li>Python Tutorial</li> </ul> <p>Week Two: HTML and CSS</p> <p>Overview</p> <ul> <li>Introduction to HTML and CSS</li> <li>Creating basic web pages using HTML and CSS</li> <li>Styling web pages using CSS</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to HTML</li> <li>HTML elements and attributes</li> <li>Creating basic web pages using HTML</li> <li>Introduction to CSS</li> <li>CSS selectors and properties</li> <li>Styling web pages using CSS</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 2.1: Create a simple HTML document</li> <li>Activity 2.2: Style a web page using CSS</li> <li>Assignment 2.1: Create a web page with a header, footer, and sidebar</li> </ul> <p>Resources</p> <ul> <li>HTML Tutorial</li> <li>CSS Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Three: JavaScript and jQuery</p> <p>Overview</p> <ul> <li>Introduction to JavaScript and jQuery</li> <li>Using JavaScript and jQuery to add interactivity to web pages</li> <li>Creating dynamic web pages using JavaScript and jQuery</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to JavaScript</li> <li>JavaScript syntax and data types</li> <li>JavaScript functions and objects</li> <li>Introduction to jQuery</li> <li>jQuery selectors and events</li> <li>Creating dynamic web pages using JavaScript and jQuery</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 3.1: Write a simple JavaScript program</li> <li>Activity 3.2: Use jQuery to add interactivity to a web page</li> <li>Assignment 3.1: Create a web page that uses JavaScript and jQuery to validate a form</li> </ul> <p>Resources</p> <ul> <li>JavaScript Tutorial</li> <li>jQuery Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Four: Python and Flask</p> <p>Overview</p> <ul> <li>Introduction to Python and Flask</li> <li>Using Python and Flask to create web applications</li> <li>Handling user input and requests</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to Python</li> <li>Python syntax and data types</li> <li>Python functions and objects</li> <li>Introduction to Flask</li> <li>Flask routes and views</li> <li>Handling user input and requests</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 4.1: Write a simple Python program</li> <li>Activity 4.2: Create a simple web application using Flask</li> <li>Assignment 4.1: Create a web application that accepts user input and displays it on the screen</li> </ul> <p>Resources</p> <ul> <li>Python Tutorial</li> <li>Flask Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Five: Databases and SQLAlchemy</p> <p>Overview</p> <ul> <li>Introduction to databases and SQLAlchemy</li> <li>Using SQLAlchemy to interact with databases</li> <li>Creating and managing databases using SQLAlchemy</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to databases</li> <li>Database types and structures</li> <li>Introduction to SQLAlchemy</li> <li>SQLAlchemy models and relationships</li> <li>Creating and managing databases using SQLAlchemy</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 5.1: Create a simple database using SQLAlchemy</li> <li>Activity 5.2: Query a database using SQLAlchemy</li> <li>Assignment 5.1: Create a web application that uses SQLAlchemy to interact with a database</li> </ul> <p>Resources</p> <ul> <li>SQL Tutorial</li> <li>SQLAlchemy Tutorial</li> <li>Bootstrap Tutorial</li> </ul> <p>Week Six: Deployment and Security</p> <p>Overview</p> <ul> <li>Introduction to deployment and security</li> <li>Deploying web applications to the cloud</li> <li>Securing web applications</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to deployment</li> <li>Deployment methods and strategies</li> <li>Introduction to security</li> <li>Web application security threats</li> <li>Securing web applications</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 6.1: Deploy a web application to the cloud</li> <li>Activity 6.2: Secure a web application</li> <li>Assignment 6.1: Create a web application that is deployed to the cloud and secured</li> </ul> <p>Resources</p> <ul> <li>AWS Tutorial</li> <li>Azure Tutorial</li> <li>Google Cloud Tutorial</li> </ul> <p>Week Seven: Project Development</p> <p>Overview</p> <ul> <li>Introduction to project development</li> <li>Planning and designing a web application</li> <li>Developing and testing a web application</li> </ul> <p>Topics Covered</p> <ul> <li>Introduction to project development</li> <li>Project planning and design</li> <li>Web application development</li> <li>Web application testing</li> </ul> <p>Activities and Assignments</p> <ul> <li>Activity 7.1: Plan and design a web application</li> <li>Activity 7.2: Develop and test a web application</li> <li>Assignment 7.1: Create a web application that meets the requirements of the project brief</li> </ul> <p>Resources</p> <ul> <li>Project Management Tutorial</li> <li>Agile Development Tutorial</li> <li>Testing Tutorial</li> </ul> <p>Week Eight: Project Presentation</p> <p>Overview</p> <ul> <li>Presentation of student projects</li> <li>Feedback and discussion</li> </ul> <p>Topics Covered</p> <ul> <li>Project presentations</li> <li>Feedback and discussion</li> </ul> <p>Activities and Assignments</p> <ul> <li>Present your project to the class</li> <li>Receive feedback from your classmates and the instructor</li> <li>Discuss the project outcomes and lessons learned</li> </ul> <p>Resources</p> <ul> <li>Presentation Skills Tutorial</li> <li>Feedback and Discussion Guide</li> </ul> <p>Week Nine: Wrap-Up and Assessment</p> <p>Overview</p> <ul> <li>Course wrap-up</li> <li>Assessment of student learning</li> </ul> <p>Topics Covered</p> <ul> <li>Course wrap-up</li> <li>Assessment of student learning</li> </ul> <p>Activities and Assignments</p> <ul> <li>Complete the course evaluation</li> <li>Submit your final project for assessment</li> </ul> <p>Resources</p> <ul> <li>Course Evaluation Form</li> <li>Project Assessment Rubric</li> </ul>"},{"location":"week2/Week%202_annotated/","title":"Week 2_annotated.pdf (PDF file)","text":""},{"location":"week2/Week%202_annotated/#week-2_annotatedpdf-pdf-file","title":"Week 2_annotated.pdf (PDF file)).","text":"<p>Summary Information Representation</p> <ul> <li>Computers process only binary digits (bits) as 0s and 1s.</li> <li>Numbers are represented using place value or two's complement for negative values.</li> <li>Text characters are represented as bit sequences.</li> </ul> <p>Character Encodings</p> <ul> <li>ASCII: 7-bit encoding for basic English characters.</li> <li>Unicode: Expanded encoding for various languages and symbols.</li> <li>UTF-8: Variable-length encoding based on Unicode, efficient for most common languages.</li> </ul> <p>Markup</p> <ul> <li>Markup distinguishes content from meaning.</li> <li>Presentational markup focuses on styling (e.g., bold, ).</li> <li>Procedural markup provides instructions for display (e.g., change font size).</li> <li>Descriptive markup indicates structural elements (e.g., , ).</li> </ul> <p>HTML</p> <ul> <li>HyperText Markup Language used for web documents.</li> <li>Tags indicate document structure and content (e.g., , </li> <li>HTML5 introduces new elements and multimedia support.</li> <li>Document Object Model (DOM) represents the logical structure of an HTML document.</li> </ul> <p>Styling</p> <ul> <li>CSS (Cascading Style Sheets) separates presentation from content.</li> <li>CSS rules can be embedded within HTML, defined internally within a </li></ul>"},{"location":"week3/Accessibilty/","title":"Web Accessibility Initiative (WAI)","text":""},{"location":"week3/Accessibilty/#web-accessibility-initiative-wai","title":"Web Accessibility Initiative (WAI)","text":"<p>The W3C Web Accessibility Initiative (WAI) outlines several core principles to make web content accessible to people with disabilities. These principles are encapsulated in guidelines such as the Web Content Accessibility Guidelines (WCAG), the Authoring Tool Accessibility Guidelines (ATAG), and the User Agent Accessibility Guidelines (UAAG). Here are some key aspects:</p> <ol> <li> <p>Perceivable Information and User Interface:</p> </li> <li> <p>Text Alternatives: Provide text alternatives for non-text content (e.g., images, icons, and multimedia). These text alternatives enable content to be rendered in various forms, such as large print, braille, speech, symbols, or simpler language\u30107\u2020source\u3011.</p> </li> <li>Captions and Audio Descriptions: Offer captions for videos and audio descriptions for visual content, ensuring that users who cannot see or hear the media can still understand the content\u30107\u2020source\u3011.</li> <li> <p>Operable User Interface and Navigation:</p> </li> <li> <p>Keyboard Accessibility: Ensure that all functionality is available from a keyboard. This is crucial for users who cannot use a mouse and rely on keyboard navigation.</p> </li> <li>Enough Time: Provide users enough time to read and use content. This includes mechanisms to extend time limits on activities.</li> <li> <p>Understandable Information and User Interface:</p> </li> <li> <p>Readable Content: Make text readable and understandable. This includes providing clear instructions and using simple language where possible.</p> </li> <li>Predictable Web Pages: Ensure that web pages operate in predictable ways. For example, navigation mechanisms should be consistent throughout the site\u30107\u2020source\u3011.</li> <li> <p>Robust Content and Reliable Interpretation:</p> </li> <li> <p>Compatibility: Content must be robust enough to be interpreted reliably by a wide variety of user agents, including assistive technologies. This involves following web standards and ensuring that content is compatible with current and future technologies.</p> </li> </ol> <p>For a comprehensive guide and more details, you can visit the W3C Accessibility Principles page.</p>"},{"location":"week3/Week%203_annotated/","title":"Week 3_annotated.pdf (PDF file)","text":""},{"location":"week3/Week%203_annotated/#week-3_annotatedpdf-pdf-file","title":"Week 3_annotated.pdf (PDF file)","text":"<p>Summary MVC Paradigm</p> <p>The Model-View-Controller (MVC) paradigm separates concerns and responsibilities within a software application:</p> <ul> <li>Model: Stores and manipulates data.</li> <li>View: Displays and interprets data.</li> <li>Controller: Handles user input and orchestrates communication between the model and the view.</li> </ul> <p>Views and User Interfaces</p> <p>Views are representations of the application's data that are presented to the user. User interfaces include various ways of interacting with a view, such as:</p> <ul> <li>Screen elements</li> <li>Audio cues</li> <li>Haptic feedback</li> <li>Motor actions</li> </ul> <p>Tools and Techniques</p> <p>Various tools and techniques aid in creating user interfaces:</p> <ul> <li>Wireframes for planning layout and structure</li> <li>HTML for direct rendering of data</li> <li>Dynamic images</li> <li>JSON/XML for machine-readable data</li> </ul> <p>Accessibility</p> <p>Accessibility ensures that people with disabilities can access and use web applications. Principles include:</p> <ul> <li>Perceivable (e.g., providing alternative text for images)</li> <li>Operable (e.g., making functionality accessible via keyboard)</li> <li>Understandable (e.g., using clear and concise language)</li> <li>Robust (e.g., ensuring compatibility with assistive technologies)</li> </ul> <p>Other Topics</p> <ul> <li>Aesthetics play a role in user interface design, influencing user experience and engagement.</li> <li>User interaction is determined by hardware constraints and user-agent information.</li> <li>Systematic processes guide the design and development of user interfaces, involving requirements gathering, user analysis, and testing. Lec file</li> </ul>"},{"location":"week3/Week%203_annotated/#week-3_annotatedpdf-pdf-file_1","title":"Week 3_annotated.pdf (PDF file)","text":""},{"location":"week3/heuristics/","title":"Nielsen Norman Group's Ten Usability Heuristics","text":""},{"location":"week3/heuristics/#nielsen-norman-groups-ten-usability-heuristics","title":"Nielsen Norman Group's Ten Usability Heuristics","text":"<p>Usability plays a crucial role in the success of digital products, whether it's a website, mobile app, or software application. To ensure that products are intuitive, efficient, and enjoyable to use, designers and developers can turn to established principles like the Ten Usability Heuristics developed by Jakob Nielsen and Rolf Molich of the Nielsen Norman Group.</p> <ol> <li>Visibility of system status: Users should always be informed about what's happening within the system. Clear and timely feedback lets users know if their actions are producing the desired results.</li> <li>Match between system and the real world: The system's language, concepts, and actions should be familiar and consistent with the user's expectations. Using everyday language and metaphors helps users understand and navigate the interface.</li> <li>User control and freedom: Users should have the freedom to navigate the system easily and recover from mistakes. Providing undo options, clear navigation paths, and intuitive controls empowers users to explore confidently.</li> <li>Consistency and standards: Consistency in design elements, terminology, and interactions throughout the system enhances predictability and reduces cognitive load. Following established design patterns and industry standards improves usability.</li> <li>Error prevention: Design should prioritize error prevention over error recovery. By anticipating and addressing potential user errors through clear instructions, constraints, and confirmation dialogs, designers can minimize frustration and improve user satisfaction.</li> <li>Recognition rather than recall: Users shouldn't have to rely on memory to complete tasks. Presenting information, options, and actions in context reduces the cognitive effort required to use the system effectively.</li> <li>Flexibility and efficiency of use: Design should accommodate both novice and experienced users. Providing shortcuts, customizable settings, and efficient workflows enables users to accomplish tasks quickly and with minimal effort.</li> <li>Aesthetic and minimalist design: Keep the interface clean and focused on essential elements. Removing unnecessary clutter and distractions enhances usability and improves the user's ability to focus on the task at hand.</li> <li>Help users recognize, diagnose, and recover from errors: Error messages should be expressed in plain language, indicate the problem clearly, and suggest constructive solutions. Guiding users through the error recovery process reduces frustration and fosters a positive user experience.</li> <li>Help and documentation: While the ideal system is self-explanatory, offering help and documentation when needed is essential. Providing easily accessible resources, such as tutorials, FAQs, and tooltips, supports users in overcoming challenges and learning to use the system effectively.</li> </ol> <p>By adhering to these usability heuristics, designers and developers can create digital products that are intuitive, efficient, and enjoyable to use, ultimately enhancing user satisfaction and driving success.</p>"},{"location":"week4/Week%204_annotated/","title":"Week 4_annotated.pdf (PDF file)","text":""},{"location":"week4/Week%204_annotated/#week-4_annotatedpdf-pdf-file","title":"Week 4_annotated.pdf (PDF file)","text":"<p>Summary Persistent Storage</p> <p>Persistent data storage is necessary to retain information beyond server resets or shutdowns. It involves organizing data into tables with columns and rows, enabling row-based operations.</p> <p>Storage Mechanisms</p> <ul> <li>In-memory data structures: Prone to errors and scalability issues.</li> <li>Keys: Improve data entry accuracy and prevent duplicate entries.</li> <li>Objects: Allow for automatic ID generation and easy attribute access.</li> <li>Pickle, CSV, TSV: Limited flexibility and store data in essentially spreadsheet-like formats.</li> <li>Spreadsheets: Suitable for tabular data, but have challenges with lookups and stored procedures.</li> <li>Relational Databases (SQL): Store data in tabular format with columns and rows.</li> <li>Unstructured Databases (NoSQL): Flexible but may lack validation features.</li> </ul> <p>Relationships</p> <p>Relationships between entities can be one-to-one, one-to-many (or many-to-one), or many-to-many.</p> <p>Data Representation</p> <p>Diagrams (e.g., Entity-Relationship, UML) and class relations can be used to illustrate relationships.</p> <p>SQL (Structured Query Language)</p> <p>SQL is used for querying and manipulating data in relational databases. It employs English-like syntax but is structured and allows for mathematical operations (e.g., joins).</p> <p>Examples</p> <ul> <li>Inner join: Retrieve data from multiple tables based on common attributes.</li> <li>Cartesian product: Combines all rows from two tables, creating many combinations.</li> <li>Complex SQL queries: Used to perform advanced data filtering and retrieval. Lec file</li> </ul>"},{"location":"week4/Week%204_annotated/#week-4_annotatedpdf-pdf-file_1","title":"Week 4_annotated.pdf (PDF file)","text":""}]}